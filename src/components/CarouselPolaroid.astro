---
interface Props {
  images: Array<{ src: string; alt: string; caption: string }>;
}

const { images = [] } = Astro.props;
---

<style>
  .carousel-container {
    max-width: 1200px;
    margin: 0 auto;
    position: relative;
    overflow: hidden;
  }

  .carousel {
    display: flex;
    gap: 2rem;
    padding: 3rem 1rem;
    width: max-content;
  }

  .polaroid {
    flex: 0 0 280px;
    background: white;
    padding: 1rem;
    box-shadow: 0 8px 16px rgba(0,0,0,0.2);
    transition: transform 0.5s ease;
    position: relative;
  }

  .polaroid::before {
    content: '';
    position: absolute;
    top: -10px;
    left: 50%;
    width: 50px;
    height: 20px;
    background: #fff;
    transform: translateX(-50%);
    clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
  }

  .polaroid img {
    width: 100%;
    height: 250px;
    object-fit: cover;
    filter: sepia(0.2);
  }

  .polaroid-caption {
    font-family: 'Handlee', cursive;
    text-align: center;
    margin-top: 1rem;
    font-size: 1.1rem;
    color: #5a3a2e;
  }
</style>

<div class="carousel-container">
  <div class="carousel">
    {images.map((image, index) => (
      <figure class="polaroid" style={`transform: rotate(${index % 2 === 0 ? '-2deg' : '2deg'})`}>
        <img 
          src={image.src} 
          alt={image.alt}
          loading="lazy"
          decoding="async"
        />
        <figcaption class="polaroid-caption">
          {image.caption}
        </figcaption>
      </figure>
    ))}
  </div>
</div>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const carousel = document.querySelector('.carousel');
    if (!carousel) return;

    // Duplica las im치genes para un loop infinito suave
    carousel.innerHTML += carousel.innerHTML;

    let scrollPosition = 0;
    const scrollSpeed = 0.5; // px por frame (ajusta para m치s r치pido/lento)
    let animationId;

    const animate = () => {
      scrollPosition += scrollSpeed;
      
      // Si hemos llegado al final del contenido duplicado, reinicia suavemente
      if (scrollPosition >= carousel.scrollWidth / 2) {
        scrollPosition = 0;
      }
      
      carousel.style.transform = `translateX(-${scrollPosition}px)`;
      animationId = requestAnimationFrame(animate);
    };

    // Inicia la animaci칩n
    animationId = requestAnimationFrame(animate);

    // Pausa al hacer hover (opcional)
    carousel.addEventListener('mouseenter', () => {
      cancelAnimationFrame(animationId);
    });
    
    carousel.addEventListener('mouseleave', () => {
      animationId = requestAnimationFrame(animate);
    });
  });
</script>